{
  "name": "Chat Export",
  "created_at": "2024-10-28T19:14:13.503498Z",
  "updated_at": "2024-10-28T19:14:13.503498Z",
  "chat_messages": [
    {
      "text": "Hey, can you tell me about this repository! What is it doing and stuff?",
      "sender": "human",
      "created_at": "2024-10-28T19:14:13.503498Z",
      "updated_at": "2024-10-28T19:14:13.503498Z",
      "attachments": [
        {
          "file_name": "paste.txt",
          "file_type": "txt",
          "file_size": 13406,
          "extracted_content": "<files>\n  <file path=\"chat_convert.py\">\n    <content><![CDATA[\nimport json\nimport argparse\nfrom datetime import datetime\nfrom typing import Dict, List\n\n\ndef sanitize_message(msg: Dict) -> Dict:\n    \"\"\"Remove sensitive and unnecessary fields from a message.\"\"\"\n    # Create a new dict with only the fields we want to keep\n    sanitized = {\n        \"text\": msg[\"text\"],\n        \"sender\": msg[\"sender\"],\n        \"created_at\": msg[\"created_at\"],\n        \"updated_at\": msg[\"updated_at\"],\n    }\n\n    # Copy attachments if they exist, removing unnecessary fields\n    if \"attachments\" in msg:\n        sanitized[\"attachments\"] = [\n            {\n                \"file_name\": att[\"file_name\"],\n                \"file_type\": att[\"file_type\"],\n                \"file_size\": att.get(\"file_size\"),\n                \"extracted_content\": att.get(\"extracted_content\"),\n            }\n            for att in msg[\"attachments\"]\n        ]\n\n    # Copy files if they exist, removing unnecessary fields\n    if \"files\" in msg:\n        sanitized[\"files\"] = [{\"file_name\": file[\"file_name\"]} for file in msg[\"files\"]]\n\n    return sanitized\n\n\ndef sort_chat_messages(json_data: Dict) -> List[Dict]:\n    \"\"\"Extract and sort chat messages, removing sensitive data.\"\"\"\n    # Extract and sanitize messages\n    messages = [sanitize_message(msg) for msg in json_data.get(\"chat_messages\", [])]\n\n    # Sort by created_at timestamp\n    return sorted(\n        messages,\n        key=lambda x: datetime.fromisoformat(x[\"created_at\"].replace(\"Z\", \"+00:00\")),\n    )\n\n\ndef format_message(msg: Dict) -> str:\n    \"\"\"Format a message for display with timestamp, sender, and preview.\"\"\"\n    timestamp = datetime.fromisoformat(msg[\"created_at\"].replace(\"Z\", \"+00:00\"))\n    text_preview = msg[\"text\"][:100] + \"...\" if len(msg[\"text\"]) > 100 else msg[\"text\"]\n    return f\"{timestamp.isoformat()} | {msg['sender']:<9} | {text_preview}\"\n\n\ndef save_sorted_chat(sorted_messages: List[Dict], output_file: str) -> None:\n    \"\"\"Save the sorted and sanitized messages to a new JSON file.\"\"\"\n    # Create minimal output structure\n    output_json = {\n        \"name\": \"Chat Export\",\n        \"created_at\": sorted_messages[0][\"created_at\"] if sorted_messages else None,\n        \"updated_at\": sorted_messages[-1][\"updated_at\"] if sorted_messages else None,\n        \"chat_messages\": sorted_messages,\n    }\n\n    # Write to new file\n    with open(output_file, \"w\") as f:\n        json.dump(output_json, f, indent=2)\n\n\ndef process_chat_json(input_file: str, output_file: str) -> None:\n    \"\"\"Process the chat JSON, sort messages, remove sensitive data, and save.\"\"\"\n    # Read the input JSON\n    with open(input_file, \"r\") as f:\n        json_data = json.load(f)\n\n    # Sort and sanitize messages\n    sorted_messages = sort_chat_messages(json_data)\n\n    # Save sanitized version\n    save_sorted_chat(sorted_messages, output_file)\n\n    # Print preview\n    print(f\"Total messages: {len(sorted_messages)}\")\n    print(f\"\\nSanitized and sorted messages saved to: {output_file}\")\n    print(\"\\nPreview of chronological order:\")\n    print(\"-\" * 120)\n\n    for msg in sorted_messages:\n        print(format_message(msg))\n        print(\"-\" * 120)\n\n\ndef main():\n    # Set up argument parser\n    parser = argparse.ArgumentParser(\n        description=\"Process a chat JSON file to sort messages and remove sensitive data\"\n    )\n    parser.add_argument(\n        \"input_file\", help=\"Path to the input JSON file containing chat messages\"\n    )\n    parser.add_argument(\n        \"output_file\", help=\"Path where the processed JSON file will be saved\"\n    )\n\n    # Parse arguments\n    args = parser.parse_args()\n\n    # Process the chat file\n    process_chat_json(args.input_file, args.output_file)\n\n\nif __name__ == \"__main__\":\n    main()\n\n    ]]></content>\n  </file>\n  <file path=\"app/page.tsx\">\n    <content><![CDATA[\n'use client';\nimport { useState } from 'react';\nimport ChatViewer from '../components/ChatViewer';\n\nexport default function Home() {\n  const [jsonContent, setJsonContent] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    try {\n      setError(null);\n      console.log('Loading file:', file.name);\n      \n      const text = await file.text();\n      console.log('File content loaded, length:', text.length);\n      \n      const parsed = JSON.parse(text);\n      console.log('JSON parsed successfully:', parsed);\n      \n      setJsonContent(text);\n    } catch (err) {\n      console.error('Error processing file:', err);\n      setError(err instanceof Error ? err.message : 'Error processing file');\n    }\n  };\n\n  return (\n    <main className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-md mx-auto mt-20 p-6 bg-white rounded-lg shadow-sm\">\n        <h1 className=\"text-xl font-semibold mb-4\">Chat Viewer</h1>\n        <label className=\"block\">\n          <span className=\"text-gray-700\">Select a chat JSON file:</span>\n          <input\n            type=\"file\"\n            accept=\".json,.txt\"\n            onChange={handleFileChange}\n            className=\"mt-1 block w-full text-sm text-gray-500\n              file:mr-4 file:py-2 file:px-4\n              file:rounded-md file:border-0\n              file:text-sm file:font-semibold\n              file:bg-blue-50 file:text-blue-700\n              hover:file:bg-blue-100\"\n          />\n        </label>\n        {error && (\n          <div className=\"mt-4 p-3 bg-red-50 text-red-700 rounded-md text-sm\">\n            {error}\n          </div>\n        )}\n      </div>\n\n      {jsonContent && (\n        <div className=\"mt-8\">\n          <ChatViewer initialData={JSON.parse(jsonContent)} />\n        </div>\n      )}\n    </main>\n  );\n}\n\n    ]]></content>\n  </file>\n  <file path=\"components/ChatViewer.tsx\">\n    <content><![CDATA[\nimport React from 'react';\nimport { ChevronDown, ChevronRight, Clock, File } from 'lucide-react';\n\ninterface ChatData {\n  name: string;\n  created_at: string;\n  chat_messages: Array<{\n    sender: string;\n    text: string;\n    created_at: string;\n    attachments?: Array<{\n      file_name: string;\n      file_size: number;\n      extracted_content: string;\n    }>;\n  }>;\n}\n\nconst DocumentContent = ({ content }: { content: string }) => {\n  const [expanded, setExpanded] = React.useState(false);\n\n  return (\n    <div className=\"mt-2\">\n      <button \n        onClick={() => setExpanded(!expanded)} \n        className=\"flex items-center gap-1 text-blue-600 hover:text-blue-800\"\n      >\n        {expanded ? <ChevronDown className=\"w-4 h-4\" /> : <ChevronRight className=\"w-4 h-4\" />}\n        {expanded ? 'Hide content' : 'Show content'}\n      </button>\n      {expanded && (\n        <div className=\"mt-2 p-4 bg-gray-50 rounded-lg text-sm whitespace-pre-wrap font-mono overflow-auto max-h-[500px]\">\n          {content}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst ChatViewer = ({ initialData }: { initialData: ChatData }) => {\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString();\n  };\n\n  const Message = ({ message }: { message: ChatData['chat_messages'][0] }) => {\n    const [expanded, setExpanded] = React.useState(false);\n    \n    return (\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-start gap-4\">\n          {/* Sender icon/avatar */}\n          <div className=\"w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center\">\n            <span className=\"text-sm font-medium\">\n              {message.sender === 'human' ? 'H' : 'A'}\n            </span>\n          </div>\n\n          {/* Message content */}\n          <div className=\"flex-1 min-w-0\">\n            {/* Header */}\n            <div className=\"flex items-center gap-2 mb-2\">\n              <span className=\"font-medium\">\n                {message.sender === 'human' ? 'Human' : 'Assistant'}\n              </span>\n              <span className=\"text-sm text-gray-500 flex items-center gap-1\">\n                <Clock className=\"w-4 h-4\" />\n                {formatDate(message.created_at)}\n              </span>\n            </div>\n\n            {/* Text content */}\n            <div className=\"prose prose-sm max-w-none\">\n              {message.text}\n            </div>\n\n            {/* Attachments */}\n            {message.attachments?.length > 0 && (\n              <div className=\"mt-4\">\n                <div className=\"flex items-center gap-2 text-sm text-gray-700 mb-2\">\n                  <button \n                    onClick={() => setExpanded(!expanded)}\n                    className=\"flex items-center gap-1 hover:text-gray-900\"\n                  >\n                    {expanded ? <ChevronDown className=\"w-4 h-4\" /> : <ChevronRight className=\"w-4 h-4\" />}\n                    {message.attachments.length} Attachment{message.attachments.length !== 1 ? 's' : ''}\n                  </button>\n                </div>\n\n                {expanded && (\n                  <div className=\"space-y-4\">\n                    {message.attachments.map((attachment, i) => (\n                      <div key={i} className=\"border rounded p-3\">\n                        <div className=\"flex items-center gap-2 text-sm font-medium\">\n                          <File className=\"w-4 h-4 text-gray-500\" />\n                          <span>{attachment.file_name}</span>\n                          <span className=\"text-gray-500\">\n                            ({attachment.file_size ? `${Math.round(attachment.file_size / 1024)}kb` : 'size unknown'})\n                          </span>\n                        </div>\n                        {attachment.extracted_content && (\n                          <DocumentContent content={attachment.extracted_content} />\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto bg-white rounded-lg shadow\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <h1 className=\"text-xl font-semibold\">{initialData.name}</h1>\n        <div className=\"text-sm text-gray-500 mt-1\">\n          Created: {formatDate(initialData.created_at)}\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div>\n        {initialData.chat_messages.map((message, i) => (\n          <Message key={i} message={message} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatViewer;\n\n    ]]></content>\n  </file>\n  <file path=\"README.md\">\n    <content><![CDATA[\n# Claude Chat Export Viewer\n\nA tool for exploring and viewing Claude AI chat exports. This project provides utilities to extract, process, and view conversations from Claude chat exports in a clean web interface.\n\n## Features\n\n- Extract individual conversations from Claude export files\n- Clean and normalize conversation data\n- View conversations in a user-friendly web interface\n- Support for attachments and file content\n- Chronological message ordering\n\n## Prerequisites\n\n- Node.js and npm/bun\n- Python 3.x\n- jq (command-line JSON processor)\n- Claude chat export file (conversations.json)\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/AdjectiveAllison/claude-chat-viewer.git\ncd claude-chat-viewer\n```\n\n2. Install dependencies:\n```bash\nbun install  # or npm install\n```\n\n## Usage\n\n### 1. Exploring Available Conversations\n\nFirst, explore your conversations.json file to find the chat you want to view:\n\n```bash\n# List all conversation names and their indices\njq -r 'to_entries | .[] | \"\\(.key): \\(.value.name)\"' conversations.json\n\n# Search conversations by name\njq -r 'to_entries | .[] | select(.value.name | contains(\"specific text\")) | \"\\(.key): \\(.value.name)\"' conversations.json\n\n# Get details about a specific conversation\njq '.[123].name' conversations.json  # Replace 123 with the conversation index\n```\n\n### 2. Extracting a Conversation\n\nOnce you've identified the conversation you want to view:\n\n```bash\n# Extract conversation by index (replace 123 with your desired conversation index)\njq '.[123]' conversations.json > export_chat.json\n```\n\n### 3. Processing the Conversation\n\nUse the conversion script to clean and format the conversation data:\n\n```bash\npython3 chat_convert.py export_chat.json chat_filtered.json\n```\n\nThis script:\n- Sorts messages chronologically\n- Removes sensitive data\n- Normalizes the format\n- Processes attachments\n\n### 4. Viewing the Conversation\n\nStart the web interface:\n\n```bash\nbun run dev  # or npm run dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) in your browser and upload your processed chat_filtered.json file.\n\n## Web Interface Features\n\n- Clean, threaded conversation view\n- Timestamp display\n- Expandable attachments\n- Code highlighting\n- Responsive design\n\n## Development\n\nThis is a [Next.js](https://nextjs.org) project with TypeScript. Key files:\n\n- `chat_convert.py`: Conversation processing script\n- `components/ChatViewer.tsx`: Main conversation display component\n- `app/page.tsx`: File upload and main page component\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\n[MIT]\n\n    ]]></content>\n  </file>\n</files>\n<file_list>\nchat_convert.py\napp/page.tsx\ncomponents/ChatViewer.tsx\nREADME.md\n</file_list>"
        }
      ],
      "files": [
        {
          "file_name": "paste.txt"
        }
      ]
    },
    {
      "text": " I'll analyze this repository and explain its purpose and functionality!\n\nThis is a \"Claude Chat Export Viewer\" - a tool designed to help users view and explore their exported conversations with Claude (Anthropic's AI assistant) in a clean, user-friendly web interface. Let me break down the main components and features:\n\n1. Core Purpose:\n- Allows users to view their Claude chat exports in a well-organized web interface\n- Cleans and processes the raw export data\n- Presents conversations in a chronological, easy-to-read format\n\n2. Main Components:\n\nA. Python Processing Script (`chat_convert.py`):\n- Takes raw chat JSON exports and cleans them up\n- Removes sensitive data\n- Sorts messages chronologically\n- Handles attachments and files\n- Creates a sanitized version of the conversation\n\nB. Web Interface:\n- Built with Next.js and TypeScript\n- Features a modern, clean design with Tailwind CSS\n- Main components:\n  - File Upload Page (`app/page.tsx`): Allows users to select and upload their processed chat JSON\n  - Chat Viewer (`components/ChatViewer.tsx`): Displays the conversation in a threaded format with:\n    - Clear message bubbles showing sender (Human/Assistant)\n    - Timestamps\n    - Expandable attachments\n    - Code highlighting\n    - Support for embedded content\n\n3. Key Features:\n- Chronological message ordering\n- Support for attachments and file content\n- Clean, responsive design\n- Expandable/collapsible sections for attachments\n- Time formatting\n- Visual distinction between human and assistant messages\n\n4. Usage Flow:\n1. User exports their Claude conversations\n2. Uses Python script to process and clean the data:\n   ```bash\n   python3 chat_convert.py export_chat.json chat_filtered.json\n   ```\n3. Launches web interface:\n   ```bash\n   bun run dev  # or npm run dev\n   ```\n4. Uploads processed JSON file to view conversations\n\nThe repository seems well-organized and includes proper documentation in the README.md with clear installation and usage instructions. It's a practical tool for anyone who wants to review or archive their Claude conversations in a more user-friendly format than raw JSON.\n\nWould you like me to dive deeper into any particular aspect of the repository? For example, I could explain more about the web interface components, the data processing, or help you understand how to use it?",
      "sender": "assistant",
      "created_at": "2024-10-28T19:14:13.503498Z",
      "updated_at": "2024-10-28T19:14:13.503498Z",
      "attachments": [],
      "files": []
    }
  ]
}